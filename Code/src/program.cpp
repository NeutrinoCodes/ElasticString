/// @file

#include "program.hpp"

#define X_MIN           -1.0f
#define X_MAX           1.0f
#define SIZE_X          1000
#define NUM_POINTS      SIZE_X
#define DX              (float)((X_MAX-X_MIN)/SIZE_X)
#define KERNEL_FILE1     "../../kernel/thekernel1.cl"
#define KERNEL_FILE2     "../../kernel/thekernel2.cl"

queue*  q1                = new queue();                                        // OpenCL queue.

kernel* k1                = new kernel();
kernel* k2                = new kernel();

point4* position          = new point4(NUM_POINTS);                             // Position.
color4* color             = new color4(NUM_POINTS);                             // Particle color.
float4* velocity          = new float4(NUM_POINTS);                             // Velocity.
float4* acceleration      = new float4(NUM_POINTS);                             // Acceleration.

point4* position_int      = new point4(NUM_POINTS);                             // Position (intermediate).
float4* velocity_int      = new float4(NUM_POINTS);                             // Velocity (intermediate).
float4* acceleration_int  = new float4(NUM_POINTS);                             // Acceleration (intermediate).

float4* gravity           = new float4(NUM_POINTS);                             // Gravity.
float4* stiffness         = new float4(NUM_POINTS);                             // Stiffness.
float4* resting           = new float4(NUM_POINTS);                             // Resting.
float4* friction          = new float4(NUM_POINTS);                             // Friction.
float4* mass              = new float4(NUM_POINTS);                             // Mass.

int1* index_PC            = new int1(NUM_POINTS);                               // Center particle.
int1* index_PR            = new int1(NUM_POINTS);                               // Right particle.
int1* index_PL            = new int1(NUM_POINTS);                               // Left particle.

float4* freedom           = new float4(NUM_POINTS);                             // Freedom/constrain flag.

text4*  text              = new text4("neutrino!", 1.0f, 1.0f, 1.0f, 1.0f);

float tick;

void setup()
{
  int i;
  int j;
  float x;
  float y;

  q1->init();                                                                    // Initializing OpenCL queue...

  k1->source_file = KERNEL_FILE1;                                               // Setting OpenCL kernel source file...
  k1->size = NUM_POINTS;                                                        // Setting kernel size...
  k1->dimension = 1;                                                            // Setting kernel dimension...
  k1->init();

  k2->source_file = KERNEL_FILE2;                                               // Setting OpenCL kernel source file...
  k2->size = NUM_POINTS;                                                        // Setting kernel size...
  k2->dimension = 1;                                                            // Setting kernel dimension...
  k2->init();


  ////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////// Preparing arrays... /////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  x = X_MIN;

  for (i = 0; i < SIZE_X; i++)
  {
    // Setting "x" initial position...
    position->x[i] = x;

    // Setting "y" initial position...
    position->y[i] = 0.0f;

    // Setting "z" initial position...
    position->z[i] = 0.0f;

    // Setting "w" initial position...
    position->w[i] = 1.0f;

    gravity->x[i] = 0.0f;                                          // Setting "x" gravity...
    gravity->y[i] = 0.0f;                                          // Setting "y" gravity...
    gravity->z[i] = 1.0f;                                         // Setting "z" gravity...
    gravity->w[i] = 1.0f;                                          // Setting "w" gravity...

    stiffness->x[i] = 1500000.0f;                                   // Setting "x" stiffness...
    stiffness->y[i] = 1500000.0f;                                   // Setting "y" stiffness...
    stiffness->z[i] = 1500000.0f;                                   // Setting "z" stiffness...
    stiffness->w[i] = 1.0f;                                        // Setting "w" stiffness...

    resting->x[i] = DX;                                            // Setting "x" resting position...
    resting->y[i] = DX;                                            // Setting "y" resting position...
    resting->z[i] = DX;                                            // Setting "z" resting position...
    resting->w[i] = 1.0f;                                          // Setting "w" resting position...

    friction->x[i] = 0.03f;                                        // Setting "x" friction...
    friction->y[i] = 0.03f;                                        // Setting "y" friction...
    friction->z[i] = 0.03f;                                        // Setting "z" friction...
    friction->w[i] = 1.0f;                                         // Setting "w" friction...

    mass->x[i] = 0.1f;                                             // Setting "x" mass...
    mass->y[i] = 0.1f;                                             // Setting "y" mass...
    mass->z[i] = 0.1f;                                             // Setting "z" mass...
    mass->w[i] = 1.0f;                                             // Setting "w" mass...

    color->r[i] = 1.0f;                                            // Setting "x" initial color...
    color->g[i] = 0.0f;                                            // Setting "y" initial color...
    color->b[i] = 0.0f;                                            // Setting "z" initial color...
    color->a[i] = 1.0f;                                            // Setting "w" initial color...

    index_PC->x[i] =  i;

    freedom->x[i] = 1.0f;
    freedom->y[i] = 1.0f;
    freedom->z[i] = 1.0f;
    freedom->w[i] = 1.0f;

    if ((i != 0) && (i != (SIZE_X - 1)))   // When on bulk:
    {
      index_PR->x[i] = (i + 1);
      index_PL->x[i] = (i - 1);
    }
    else                                                                      // When on extremes:
    {
      gravity->x[i] = 0.0f;                                        // Setting "x" gravity...
      gravity->y[i] = 0.0f;                                        // Setting "y" gravity...
      gravity->z[i] = 0.0f;                                        // Setting "z" gravity...
      gravity->w[i] = 1.0f;                                        // Setting "w" gravity...

      freedom->x[i] = 0.0f;
      freedom->y[i] = 0.0f;
      freedom->z[i] = 0.0f;
      freedom->w[i] = 1.0f;
    }

    if (i == 0)                          // When on left extreme:
    {
      index_PR->x[i] = (i + 1) ;
      index_PL->x[i] = index_PC->x[i];
    }

    if (i == (SIZE_X - 1))               // When on right extreme:
    {
      index_PR->x[i] = index_PC->x[i];
      index_PL->x[i] = (i - 1) ;
    }

    x += DX;
  }

  tick = 0.0f;                                                                  // Setting initial time tick...

  typeset(text);                                                                // Typesetting "text"...

  position->init();                                                             // Initializing kernel variable...
  position_int->init();
  color->init();                                                                // Initializing kernel variable...
  velocity->init();                                                             // Initializing kernel variable...
  velocity_int->init();
  acceleration->init();                                                         // Initializing kernel variable...
  acceleration_int->init();
  gravity->init();                                                              // Initializing kernel variable...
  stiffness->init();                                                            // Initializing kernel variable...
  resting->init();                                                              // Initializing kernel variable...
  friction->init();                                                             // Initializing kernel variable...
  mass->init();                                                                 // Initializing kernel variable...
  index_PC->init();                                                             // Initializing kernel variable...
  index_PR->init();                                                             // Initializing kernel variable...
  index_PL->init();                                                             // Initializing kernel variable...
  freedom->init();                                                              // Initializing kernel variable...

  position->set(k1, 0);                                                         // Setting kernel argument #0...
  color->set(k1, 1);                                                            // Setting kernel argument #1...
  position_int->set(k1, 2);                                                         // Setting kernel argument #0...
  velocity->set(k1, 3);                                                         // Setting kernel argument #3...
  velocity_int->set(k1, 4);                                                         // Setting kernel argument #3...
  acceleration->set(k1, 5);                                                     // Setting kernel argument #4...
  acceleration_int->set(k1, 6);                                                     // Setting kernel argument #4...
  gravity->set(k1, 7);                                                          // Setting kernel argument #5...
  stiffness->set(k1, 8);                                                        // Setting kernel argument #6...
  resting->set(k1, 9);                                                          // Setting kernel argument #7...
  friction->set(k1, 10);                                                         // Setting kernel argument #8...
  mass->set(k1, 11);                                                             // Setting kernel argument #9...
  index_PR->set(k1, 12);                                                        // Setting kernel argument #11...
  index_PL->set(k1, 13);                                                        // Setting kernel argument #13...
  freedom->set(k1, 14);                                                         // Setting kernel argument #15...

  position->set(k2, 0);                                                         // Setting kernel argument #0...
  color->set(k2, 1);                                                            // Setting kernel argument #1...
  position_int->set(k2, 2);                                                         // Setting kernel argument #0...
  velocity->set(k2, 3);                                                         // Setting kernel argument #3...
  velocity_int->set(k2, 4);                                                         // Setting kernel argument #3...
  acceleration->set(k2, 5);                                                     // Setting kernel argument #4...
  acceleration_int->set(k2, 6);                                                     // Setting kernel argument #4...
  gravity->set(k2, 7);                                                          // Setting kernel argument #5...
  stiffness->set(k2, 8);                                                        // Setting kernel argument #6...
  resting->set(k2, 9);                                                          // Setting kernel argument #7...
  friction->set(k2, 10);                                                         // Setting kernel argument #8...
  mass->set(k2, 11);                                                             // Setting kernel argument #9...
  index_PR->set(k2, 12);                                                        // Setting kernel argument #11...
  index_PL->set(k2, 13);                                                        // Setting kernel argument #13...
  freedom->set(k2, 14);                                                         // Setting kernel argument #15...
}

void loop()
{
  position->push(q1, k1, 0);                                                     // Pushing kernel argument #0...
  color->push(q1, k1, 1);                                                        // Pushing kernel argument #1...
  position_int->push(q1, k1, 2);                                                     // Pushing kernel argument #0...
  velocity->push(q1, k1, 3);                                                     // Pushing kernel argument #3...
  velocity_int->push(q1, k1, 4);                                                     // Pushing kernel argument #3...
  acceleration->push(q1, k1, 5);                                                 // Pushing kernel argument #4...
  acceleration_int->push(q1, k1, 6);                                                 // Pushing kernel argument #4...
  gravity->push(q1, k1, 7);                                                      // Pushing kernel argument #5...
  stiffness->push(q1, k1, 8);                                                    // Pushing kernel argument #6...
  resting->push(q1, k1, 9);                                                      // Pushing kernel argument #7...
  friction->push(q1, k1, 10);                                                     // Pushing kernel argument #8...
  mass->push(q1, k1, 11);                                                         // Pushing kernel argument #9...
  index_PR->push(q1, k1, 12);                                                    // Pushing kernel argument #11...
  index_PL->push(q1, k1, 13);                                                    // Pushing kernel argument #13...
  freedom->push(q1, k1, 14);                                                     // Pushing kernel argument #15...

  k1->execute(q1, WAIT);

  position->pop(q1, k1, 0);                                                      // Popping kernel argument #0...
  color->pop(q1, k1, 1);                                                         // Popping kernel argument #1...
  position_int->pop(q1, k1, 2);                                                      // Popping kernel argument #0...
  velocity->pop(q1, k1, 3);                                                      // Popping kernel argument #3...
  velocity_int->pop(q1, k1, 4);                                                      // Popping kernel argument #3...
  acceleration->pop(q1, k1, 5);                                                  // Popping kernel argument #4...
  acceleration_int->pop(q1, k1, 6);                                                  // Popping kernel argument #4...
  gravity->pop(q1, k1, 7);                                                       // Popping kernel argument #5...
  stiffness->pop(q1, k1, 8);                                                     // Popping kernel argument #6...
  resting->pop(q1, k1, 9);                                                       // Popping kernel argument #7...
  friction->pop(q1, k1, 10);                                                      // Popping kernel argument #8...
  mass->pop(q1, k1, 11);                                                          // Popping kernel argument #9...
  index_PR->pop(q1, k1, 12);                                                     // Popping kernel argument #11...
  index_PL->pop(q1, k1, 13);                                                     // Popping kernel argument #13...
  freedom->pop(q1, k1, 14);                                                      // Popping kernel argument #15...

  position->push(q1, k2, 0);                                                     // Pushing kernel argument #0...
  color->push(q1, k2, 1);                                                        // Pushing kernel argument #1...
  position_int->push(q1, k2, 2);                                                     // Pushing kernel argument #0...
  velocity->push(q1, k2, 3);                                                     // Pushing kernel argument #3...
  velocity_int->push(q1, k2, 4);                                                     // Pushing kernel argument #3...
  acceleration->push(q1, k2, 5);                                                 // Pushing kernel argument #4...
  acceleration_int->push(q1, k2, 6);                                                 // Pushing kernel argument #4...
  gravity->push(q1, k2, 7);                                                      // Pushing kernel argument #5...
  stiffness->push(q1, k2, 8);                                                    // Pushing kernel argument #6...
  resting->push(q1, k2, 9);                                                      // Pushing kernel argument #7...
  friction->push(q1, k2, 10);                                                     // Pushing kernel argument #8...
  mass->push(q1, k2, 11);                                                         // Pushing kernel argument #9...
  index_PR->push(q1, k2, 12);                                                    // Pushing kernel argument #11...
  index_PL->push(q1, k2, 13);                                                    // Pushing kernel argument #13...
  freedom->push(q1, k2, 14);                                                     // Pushing kernel argument #15...

  k2->execute(q1, WAIT);

  position->pop(q1, k2, 0);                                                      // Popping kernel argument #0...
  color->pop(q1, k2, 1);                                                         // Popping kernel argument #1...
  position_int->pop(q1, k2, 2);                                                      // Popping kernel argument #0...
  velocity->pop(q1, k2, 3);                                                      // Popping kernel argument #3...
  velocity_int->pop(q1, k2, 4);                                                      // Popping kernel argument #3...
  acceleration->pop(q1, k2, 5);                                                  // Popping kernel argument #4...
  acceleration_int->pop(q1, k2, 6);                                                  // Popping kernel argument #4...
  gravity->pop(q1, k2, 7);                                                       // Popping kernel argument #5...
  stiffness->pop(q1, k2, 8);                                                     // Popping kernel argument #6...
  resting->pop(q1, k2, 9);                                                       // Popping kernel argument #7...
  friction->pop(q1, k2, 10);                                                      // Popping kernel argument #8...
  mass->pop(q1, k2, 11);                                                          // Popping kernel argument #9...
  index_PR->pop(q1, k2, 12);                                                     // Popping kernel argument #11...
  index_PL->pop(q1, k2, 13);                                                     // Popping kernel argument #13...
  freedom->pop(q1, k2, 14);                                                      // Popping kernel argument #15...

  plot(position, color, STYLE_POINT);                                           // Plotting points...
//  print(text);                                                                  // Printing text...
}

void terminate()
{
  delete position;
  delete position_int;
  delete color;
  delete velocity;
  delete velocity_int;
  delete acceleration;
  delete acceleration_int;
  delete gravity;
  delete stiffness;
  delete resting;
  delete friction;
  delete mass;
  delete index_PL;
  delete index_PR;

  delete q1;
  delete k1;
  delete k2;
  delete text;

  printf("All done!\n");
}
